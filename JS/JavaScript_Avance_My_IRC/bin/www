#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('nodejs-user-registration:server');
let http = require('http');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

let mongoose  = require('mongoose');
let Channel = mongoose.model('Channels');

const io = require('socket.io')(server);

let i = 0;

// let checkChannel = function(pChannel) {
//     Channel.findOne(pChannel)
//         .exec((err, doc) => {
//             if (err) console.log(err);
//             if (!doc) {
//             }
//         });
// };

io.on('connection', (socket) => {
    // console.log(++i);
    // socket.on('5b2659fe9c19d7690f91d9c8', (msg) => {
    //     console.log(msg);
    //     io.emit('5b2659fe9c19d7690f91d9c8', msg);
    // });

    socket.on('connect', (data) => {

    });

    // SETTING ALL ALREADY EXISTING CHANNEL FROM DB
    let selfSocket = socket;

    Channel.find()
        .exec((err,doc) => {
            if (err) throw err;
            if (doc) {
                // console.log(doc);
                for (let i = 0; i < doc.length; i++) {

                    // console.log(socket);

                    socket.on(doc[i]._id, (msg) => {
                        console.log('broadcasting on : ', doc[i].channelName);
                        io.emit(doc[i]._id, msg);
                    });

                }
            }
        });

    socket.on('channel', (data) => {

        console.log(socket);

        socket.on(data.channelData._id, (msg) => {
            console.log('broadcasting on : ', data.channelName);
            io.emit(data.channelData._id, msg);
        });

        let str = '/'+ data.channelName;
        console.log('addChanel', str);
        let generalMsg = { user: 'God : ', msg: 'A new channel "'+str+'" as been added'};
        io.emit('message', generalMsg);
        io.emit('channel', {channel: data.channelData});

    });

    // socket.on('channel', (data) => {
    //     checkChannel();
    //     let channel = io.of(data.channelName)
    //         .on('message', (msg) => {
    //             channel.emit('message', msg);
    //         })
    // })
});

io.on('deconnection', (socket) => {
    console.log(--i);
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
